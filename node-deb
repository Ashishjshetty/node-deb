#!/bin/bash
set -e

die() {
  echo "$@" >&2
  exit 1
}

# beacuse OSX is shit and can't do `readlink -f`
readlink_() {
  local src="${BASH_SOURCE[0]}"
  while [ -h "$src" ]; do
    local dir="$(cd -P "$( dirname "$src" )" && pwd)"
    local src="$(readlink "$src")"
    [[ $src != /* ]] && src="$dir/$src"
  done
  echo "$(cd -P "$( dirname "$src" )" && pwd)"
}

node_deb_dir=`readlink_ $0`

# All the variables that are injected into templates
package_name=
package_version=
binary_name=
start_command=
user=
group=
package_description=
package_maintainer=

# Other variables
change_log=
files=
no_delete_temp=0
no_md5sums=0

usage() {
  # Local var because of grep
  local helpdoc='HELP'
  local helpdoc+='DOC'
  echo 'Usage: node-deb [opts] [-- file1 file2 ...]'
  echo 'Opts:'
  grep "$helpdoc" "$node_deb_dir/node-deb" -B 1 | egrep -v '^--$' | sed -e 's/^  //g' -e "s/# $helpdoc: //g"
}

while [ -n "$1" ]; do
  param="$1"
  value="$2"
  case $param in
    -b | --binary-name)
      # HELPDOC: The name of the binary (default: $package-name)
      binary_name="$value"
      shift
      ;;
    -g | --group)
      # HELPDOC:  The Unix group the process will run as (default: $user)
      group="$value"
      shift
      ;;
    -h | --help)
      # HELPDOC: Display this message and exit
      usage
      exit 0
      ;;
    -n | --package-name)
      # HELPDOC: The name of the Debian package (default: 'name' from package.json)
      package_name="$value"
      shift
      ;;
    --no-delete-temp)
      # HELPDOC: Do not delete temp directory used to build Debian package
      no_delete_temp=1
      ;;
    --no-md5sums)
      # HELPDOC: Do not calculate md5sums
      no_md5sums=1
      ;;
    -u | --user)
      # HELPDOC: The Unix user the process will run as (default: $package-name)
      user="$value"
      shift
      ;;
    -v | --version)
      # HELPDOC: The version of the Debian package (default: 'version' from package.json)
      package_version="$value"
      shift
      ;;
    --)
      # HELPDOC: Delimiter separating options from files and directories
      shift
      break
      ;;
    *)
      echo "Invalid option: $param" >&2
      usage >&2
      exit 1
  esac
  shift
done

if [ -z "$1 " ]; then
  die 'You must pick at least one directory to add to the Debian package'
fi

for file in $files; do
  if ! [ -e $file ]; then
    die "File does not exist: '$file'. Aborting"
  fi
done

package_name=`jq -r '.name' package.json`
if [ "$package_name" == 'null' ]; then 
  die 'Your package.json must have element "name"'
fi

start_command=`jq -r '.node_deb.start_command' package.json`
if [ "$start_command" == 'null' ]; then
  die 'Your package.json must have element "node_deb.start_command"'
fi

if [ -z $package_version ]; then
  package_version=`jq -r '.version' package.json`
  if [ "$package_version" == 'null' ]; then
    die 'If no override is provided, your package.json must have element "version"'
  fi
fi

package_description=`jq -r '.description' package.json`
package_maintainer=`jq -r '.author' package.json`

: ${binary_name:=$package_name}
: ${user:=$package_name}
: ${group:=$user}

deb_dir="${package_name}_${package_version}_all"

finish() {
  if [ $no_delete_temp -ne 1 ]; then
    rm -rf "$deb_dir"
  fi
}

trap "finish" EXIT

if [ -e "$deb_dir" ]; then rm -rf "$deb_dir"; fi

mkdir -p "$deb_dir/DEBIAN"
mkdir -p "$deb_dir/etc/$package_name"
mkdir -p "$deb_dir/etc/init"
mkdir -p "$deb_dir/usr/share/$package_name/bin"
mkdir -p "$deb_dir/usr/bin"

escape() {
  # TODO ? sed -e 's/[]\/$*.^|[]/\\&/g' <<< "$@"
  echo $(echo $@ | sed -e 's/[]\/$*.^|[]/\\&/g')
}

replace_vars() {
  local file=$1
  local target_file=$2

  # TODO ? sed < $file \
  cat $file | sed \
    -e "s/\${node_deb_package_name}/$(escape $package_name)/g" \
    -e "s/\${node_deb_app_command}/$(escape $app_command)/g" \
    -e "s/\${node_deb_package_version}/$(escape $package_version)/g" \
    -e "s/\${node_deb_start_command}/$(escape $start_command)/g" \
    -e "s/\${node_deb_package_description}/$(escape $package_description)/g" \
    -e "s/\${node_deb_group}/$(escape $group)/g" \
    -e "s/\${node_deb_package_maintainer}/$(escape $package_maintainer)/g" \
    -e "s/\${node_deb_user}/$(escape $user)/g" \
    > $target_file
}

replace_vars "$node_deb_dir/templates/control" "$deb_dir/DEBIAN/control"
replace_vars "$node_deb_dir/templates/postinst" "$deb_dir/DEBIAN/postinst"
replace_vars "$node_deb_dir/templates/postrm" "$deb_dir/DEBIAN/postrm"
replace_vars "$node_deb_dir/templates/prerm" "$deb_dir/DEBIAN/prerm"
replace_vars "$node_deb_dir/templates/init.conf" "$deb_dir/etc/init/$package_name.conf"
replace_vars "$node_deb_dir/templates/binary" "$deb_dir/usr/share/$package_name/bin/$binary_name"

ln -sf "/usr/share/$node_app/bin/$binary_name" "$deb_dir/usr/bin/$binary_name"

chmod -R 0755 "$deb_dir/DEBIAN/"
chmod -R 0755 "$deb_dir/usr/share/$package_name/bin/$binary_name"

# Copy all files into temporary Debian dir
find "$@" -type f -print0 | {
  while IFS= read -r -d '' file; do
    dir="$deb_dir/usr/share/$packag_name/$(dirname "$file")"
    if ! [ -e "$dir" ]; then mkdir -p "$dir"; fi
    cp "$file" "$dir"
  done
}

write_md5sum() {
  # Using $@ and not $1 because of files with whitespace
  local file="$@"

  # Debian/Ubuntu
  if hash md5sum 2>/dev/null; then
    local sum=`md5sum "$file" | cut -d ' ' -f1`
  # OSX
  elif hash md5 2>/dev/null; then
    local sum=`md5 "$file" | awk -F '=' '{ printf $NF }' | tr -d ' '`
  # Oh dear...
  else
    die 'Unable to find suitable md5 sum program'
  fi

  local file=`echo $file | sed -e "s/$(escape $deb_dir)//" | sed -e 's:^\.::' -e 's:^/*::'`
  echo "$sum $file" >> "$deb_dir/DEBIAN/md5sums"
}

# Calculate md5sums
if [ "$no_md5sums" -eq 0 ]; then
  find "$deb_dir" -path "$deb_dir/DEBIAN" -prune -o -type f -print0 | {
  while IFS= read -r -d '' file; do
    write_md5sum $file
  done
}
fi

dpkg-deb --build "$deb_dir"
